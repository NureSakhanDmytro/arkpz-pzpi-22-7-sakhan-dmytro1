Міністерство освіти і науки Украї¨ни
Харківськии˘ національнии˘ університет радіоелектроніки
Кафедра програмної¨ інженерії¨ Звіт
ПЗ №2
З Аналіз та рефакторинг коду
На тему «Методи рефакторингу коду програмного забезпечення»



Виконав:	                                 Перевірив:
 
студент групи ПЗПІ-22-7	                   кафедри ПІ
Сахань Дмитро Олександрович	   Сокорчук Ігор Петрович
























Харків 2023

Хід роботи
Задання: обрати три методи рефакторингу коду із книги Мартіна Фаулера «Refactoring: Improving the Design of Existing Code».

Було обрано три методи для рефакторингу:

1) Виділення методу (Extract Method)
Суть: Перенесення фрагмента коду в окремий метод із чітким призначенням.
Мета: Зменшення розміру методів, підвищення читабельності та спрощення тестування.

2) Інкапсуляція змінної (Encapsulate Field)
Суть: Заміна публічного поля на приватне з методами get та set.
Мета: Захист даних об'єкта та забезпечення контролю над доступом.

3) Заміна магічних чисел (Replace Magic Number with Symbolic Constant)
Суть: Заміна числових літералів на іменовані константи.
Мета: Підвищення розуміння коду та уникнення помилок.

У презентації (Додаток А) наведено ключові моменти щодо методів рефакторингу.


Висновки:
У цій роботі я дослідив три методи рефакторингу з книги Мартіна Фаулера: Extract Method,Encapsulate Field,Replace Magic Number with Symbolic Constant. Застосування цих методів у моєму проєкті Match-3-гри дозволило покращити читабельність коду, зменшити дублювання та підвищити гнучкість архітектури.  
Рефакторинг допоміг зробити код більш структурованим і легким для підтримки, що важливо для проєктів із динамічними вимогами. Це підкреслює важливість регулярного покращення коду для зниження технічного боргу та створення надійного програмного забезпечення.











ДОДАТКИ

Приклади коду:

1) Виділення методу (Extract Method)
   

2) Інкапсуляція змінної (Encapsulate Field)

До рефакторингу:
 


 Після рефакторингу:

 

4) Заміна магічних чисел (Replace Magic Number with Symbolic Constant)

До рефакторингу: 
 


Після рефакторингу:
 
Ці приклади демонструють правильні та неправильні підходи до написання коду, що допомагає уникнути поширених помилок у розробці Методів рефакторингу коду програмного забезпечення




Посилання на відеопрезентацію: 
https://youtu.be/Our8T1ZhJvw

Посилання на репозиторій:
https://github.com/Jopselion/arkpz-pzpi-22-7-sakhan-dmytro/edit/main/Pract2









